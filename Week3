#-----------------------------------#Exercise 1------------------------------------

#Load and display the image 'dog.jfif'. Save the image in png format.

from PIL import Image
import matplotlib.pyplot as plt

image_path = "C:\Users\TuckSeng\Downloads\OneDrive_1_20-07-2024\dog.jfif" 

image = Image.open(image_path)
image.show()

# Save the image in png format
png_image_path = "dog.png"
image.save(png_image_path)

#-----------------------------------#Exercise 2------------------------------------
import matplotlib.pyplot as plt
import cv2

# Load the original image
image_path = "C:\Users\TuckSeng\Downloads\OneDrive_1_20-07-2024\dog.jfif"  
original_image = cv2.imread(image_path)

# Convert the image to grayscale
grayscale_image = cv2.cvtColor(original_image, cv2.COLOR_BGR2GRAY)

# Display the images side by side
plt.figure(figsize=(10, 5))

plt.subplot(1, 2, 1)
plt.title("Original Image")
plt.imshow(cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB))
plt.axis('off')

plt.subplot(1, 2, 2)
plt.title("Grayscale Image")
plt.imshow(grayscale_image, cmap='gray')
plt.axis('off')

plt.show()

#-----------------------------------#Exercise 3------------------------------------
import cv2

# Load the video
video_path = "C:\Users\TuckSeng\Downloads\img_pexels.mp4"
cap = cv2.VideoCapture(video_path)

# Get original width and height
original_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
original_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

# Define new dimensions
new_width = original_width // 2
new_height = original_height // 2

# Define the codec and create VideoWriter object
fourcc = cv2.VideoWriter_fourcc(*'XVID')
out = cv2.VideoWriter('smaller_img_pexels.avi', fourcc, 20.0, (new_width, new_height))

while cap.isOpened():
    ret, frame = cap.read()
    if ret:
        # Resize the frame
        smaller_frame = cv2.resize(frame, (new_width, new_height))

        # Write the resized frame to the output video
        out.write(smaller_frame)

        # Display the resized frame
        cv2.imshow('Smaller Frame', smaller_frame)
        
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    else:
        break

# Release everything when job is finished
cap.release()
out.release()
cv2.destroyAllWindows()

#-----------------------------------#Exercise 4------------------------------------
import cv2
import numpy as np

# Load the image
image_path = "C:\Users\TuckSeng\Downloads\OneDrive_1_20-07-2024\dog.jfif"  # Change this to the correct path of the image
image = cv2.imread(image_path)

# Define the scale factor
scale_factor = 2

# Enlarge using linear interpolation
linear_enlarged = cv2.resize(image, None, fx=scale_factor, fy=scale_factor, interpolation=cv2.INTER_LINEAR)

# Enlarge using cubic interpolation
cubic_enlarged = cv2.resize(image, None, fx=scale_factor, fy=scale_factor, interpolation=cv2.INTER_CUBIC)

# Enlarge using nearest neighbor interpolation
nearest_enlarged = cv2.resize(image, None, fx=scale_factor, fy=scale_factor, interpolation=cv2.INTER_NEAREST)

# Display the images
plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
plt.title("Linear Interpolation")
plt.imshow(cv2.cvtColor(linear_enlarged, cv2.COLOR_BGR2RGB))
plt.axis('off')

plt.subplot(1, 3, 2)
plt.title("Cubic Interpolation")
plt.imshow(cv2.cvtColor(cubic_enlarged, cv2.COLOR_BGR2RGB))
plt.axis('off')

plt.subplot(1, 3, 3)
plt.title("Nearest Neighbor Interpolation")
plt.imshow(cv2.cvtColor(nearest_enlarged, cv2.COLOR_BGR2RGB))
plt.axis('off')

plt.show()
